create schema if not exists "business_information";


create table "public"."business_information" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default auth.uid(),
    "domain" text,
    "rankings_data" jsonb,
    "rankings_updated_at" timestamp with time zone
);


alter table "public"."business_information" enable row level security;

create table "public"."competitors" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default auth.uid(),
    "domain" text,
    "rankings_data" jsonb,
    "rankings_updated_at" timestamp with time zone
);


alter table "public"."competitors" enable row level security;

create table "public"."customers" (
    "created_at" timestamp with time zone not null default now(),
    "id" uuid not null default auth.uid(),
    "referral_code" text,
    "stripe_customer_id" text
);


alter table "public"."customers" enable row level security;

create table "public"."prices" (
    "id" text not null,
    "active" boolean,
    "description" text,
    "unit_amount" bigint,
    "currency" text,
    "type" text,
    "interval" text,
    "interval_count" smallint,
    "trial_period_days" smallint,
    "metadata" jsonb,
    "product_id" text
);


alter table "public"."prices" enable row level security;

create table "public"."products" (
    "active" boolean not null,
    "name" text,
    "description" text,
    "image" text,
    "metadata" jsonb,
    "id" text not null
);


alter table "public"."products" enable row level security;

create table "public"."seo_crawls" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default auth.uid(),
    "external_job_id" character varying,
    "domain" text,
    "onpage_score" text,
    "total_pages" text,
    "page_metrics" jsonb,
    "crawl_status" jsonb,
    "lighthouse_task_id" text,
    "lighthouse_data" jsonb,
    "scraped_pages" jsonb
);


alter table "public"."seo_crawls" enable row level security;

create table "public"."subscriptions" (
    "id" text not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default auth.uid(),
    "status" text,
    "price_id" text,
    "quantity" smallint,
    "cancel_at_period_end" boolean,
    "created" timestamp without time zone not null default (now() AT TIME ZONE 'utc'::text),
    "current_period_start" timestamp without time zone not null default (now() AT TIME ZONE 'utc'::text),
    "current_period_end" timestamp without time zone not null default (now() AT TIME ZONE 'utc'::text),
    "ended_at" timestamp without time zone default (now() AT TIME ZONE 'utc'::text),
    "cancel_at" timestamp without time zone default (now() AT TIME ZONE 'utc'::text),
    "canceled_at" timestamp without time zone default (now() AT TIME ZONE 'utc'::text),
    "trial_start" timestamp without time zone default (now() AT TIME ZONE 'utc'::text),
    "trial_end" timestamp without time zone default (now() AT TIME ZONE 'utc'::text),
    "metadata" jsonb
);


alter table "public"."subscriptions" enable row level security;

create table "public"."users" (
    "id" uuid not null default auth.uid(),
    "created_at" timestamp with time zone not null default now(),
    "full_name" text,
    "avatar_url" text,
    "billing_address" jsonb,
    "payment_method" jsonb
);


alter table "public"."users" enable row level security;

alter table "public"."business_analyses" add column "error_message" text;

alter table "public"."business_analyses" add column "last_updated" timestamp with time zone not null default timezone('utc'::text, now());

alter table "public"."business_analyses" add column "progress" text;

alter table "public"."business_analyses" enable row level security;

alter table "public"."website_scrapes" add column "error_message" text;

alter table "public"."website_scrapes" add column "last_updated" timestamp with time zone not null default timezone('utc'::text, now());

alter table "public"."website_scrapes" enable row level security;

CREATE UNIQUE INDEX business_information_pkey ON public.business_information USING btree (id);

CREATE UNIQUE INDEX competitors_pkey ON public.competitors USING btree (id);

CREATE UNIQUE INDEX customers_pkey ON public.customers USING btree (id);

CREATE UNIQUE INDEX prices_pkey ON public.prices USING btree (id);

CREATE UNIQUE INDEX products_pkey ON public.products USING btree (id);

CREATE UNIQUE INDEX seo_crawls_pkey ON public.seo_crawls USING btree (id);

CREATE UNIQUE INDEX subscriptions_pkey ON public.subscriptions USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

CREATE UNIQUE INDEX users_user_id_key ON public.customers USING btree (id);

alter table "public"."business_information" add constraint "business_information_pkey" PRIMARY KEY using index "business_information_pkey";

alter table "public"."competitors" add constraint "competitors_pkey" PRIMARY KEY using index "competitors_pkey";

alter table "public"."customers" add constraint "customers_pkey" PRIMARY KEY using index "customers_pkey";

alter table "public"."prices" add constraint "prices_pkey" PRIMARY KEY using index "prices_pkey";

alter table "public"."products" add constraint "products_pkey" PRIMARY KEY using index "products_pkey";

alter table "public"."seo_crawls" add constraint "seo_crawls_pkey" PRIMARY KEY using index "seo_crawls_pkey";

alter table "public"."subscriptions" add constraint "subscriptions_pkey" PRIMARY KEY using index "subscriptions_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."customers" add constraint "users_user_id_key" UNIQUE using index "users_user_id_key";

alter table "public"."prices" add constraint "prices_product_id_fkey" FOREIGN KEY (product_id) REFERENCES products(id) not valid;

alter table "public"."prices" validate constraint "prices_product_id_fkey";

alter table "public"."subscriptions" add constraint "subscriptions_price_id_fkey" FOREIGN KEY (price_id) REFERENCES prices(id) not valid;

alter table "public"."subscriptions" validate constraint "subscriptions_price_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.ufn_get_user_migration_data_json()
 RETURNS TABLE(j json)
 LANGUAGE plpgsql
AS $function$
BEGIN
RETURN QUERY
SELECT array_to_json(array_agg(json_strip_nulls(row_to_json(r))))
FROM
    (SELECT
         u.instance_id,
         u.encrypted_password,
         EXTRACT(EPOCH from u.created_at)*1000 as created_at,
         i.provider,
         i.email,
         CASE WHEN u.encrypted_password = '' THEN i.provider||'|'||i.user_id
              ELSE 'auth0'||'|'||i.user_id
             END as "user_id",
         CASE WHEN u.encrypted_password = '' THEN null
              ELSE substring(u.encrypted_password,5,2)
             END as "factor",
         substring(u.encrypted_password,8,22) as salt,
         CASE WHEN u.encrypted_password = '' THEN 'hasprovider'
              ELSE substring(u.encrypted_password,30,31)
             END as "password",
         CASE WHEN u.encrypted_password = '' THEN null
              ELSE 'bcrypt'
             END as "encryptionScheme",
         true as email_verified
     FROM auth.users u JOIN auth.identities i
                            ON u.id = i.user_id
    ) r;
END;
$function$
;

grant delete on table "public"."business_information" to "anon";

grant insert on table "public"."business_information" to "anon";

grant references on table "public"."business_information" to "anon";

grant select on table "public"."business_information" to "anon";

grant trigger on table "public"."business_information" to "anon";

grant truncate on table "public"."business_information" to "anon";

grant update on table "public"."business_information" to "anon";

grant delete on table "public"."business_information" to "authenticated";

grant insert on table "public"."business_information" to "authenticated";

grant references on table "public"."business_information" to "authenticated";

grant select on table "public"."business_information" to "authenticated";

grant trigger on table "public"."business_information" to "authenticated";

grant truncate on table "public"."business_information" to "authenticated";

grant update on table "public"."business_information" to "authenticated";

grant delete on table "public"."business_information" to "service_role";

grant insert on table "public"."business_information" to "service_role";

grant references on table "public"."business_information" to "service_role";

grant select on table "public"."business_information" to "service_role";

grant trigger on table "public"."business_information" to "service_role";

grant truncate on table "public"."business_information" to "service_role";

grant update on table "public"."business_information" to "service_role";

grant delete on table "public"."competitors" to "anon";

grant insert on table "public"."competitors" to "anon";

grant references on table "public"."competitors" to "anon";

grant select on table "public"."competitors" to "anon";

grant trigger on table "public"."competitors" to "anon";

grant truncate on table "public"."competitors" to "anon";

grant update on table "public"."competitors" to "anon";

grant delete on table "public"."competitors" to "authenticated";

grant insert on table "public"."competitors" to "authenticated";

grant references on table "public"."competitors" to "authenticated";

grant select on table "public"."competitors" to "authenticated";

grant trigger on table "public"."competitors" to "authenticated";

grant truncate on table "public"."competitors" to "authenticated";

grant update on table "public"."competitors" to "authenticated";

grant delete on table "public"."competitors" to "service_role";

grant insert on table "public"."competitors" to "service_role";

grant references on table "public"."competitors" to "service_role";

grant select on table "public"."competitors" to "service_role";

grant trigger on table "public"."competitors" to "service_role";

grant truncate on table "public"."competitors" to "service_role";

grant update on table "public"."competitors" to "service_role";

grant delete on table "public"."customers" to "anon";

grant insert on table "public"."customers" to "anon";

grant references on table "public"."customers" to "anon";

grant select on table "public"."customers" to "anon";

grant trigger on table "public"."customers" to "anon";

grant truncate on table "public"."customers" to "anon";

grant update on table "public"."customers" to "anon";

grant delete on table "public"."customers" to "authenticated";

grant insert on table "public"."customers" to "authenticated";

grant references on table "public"."customers" to "authenticated";

grant select on table "public"."customers" to "authenticated";

grant trigger on table "public"."customers" to "authenticated";

grant truncate on table "public"."customers" to "authenticated";

grant update on table "public"."customers" to "authenticated";

grant delete on table "public"."customers" to "service_role";

grant insert on table "public"."customers" to "service_role";

grant references on table "public"."customers" to "service_role";

grant select on table "public"."customers" to "service_role";

grant trigger on table "public"."customers" to "service_role";

grant truncate on table "public"."customers" to "service_role";

grant update on table "public"."customers" to "service_role";

grant delete on table "public"."prices" to "anon";

grant insert on table "public"."prices" to "anon";

grant references on table "public"."prices" to "anon";

grant select on table "public"."prices" to "anon";

grant trigger on table "public"."prices" to "anon";

grant truncate on table "public"."prices" to "anon";

grant update on table "public"."prices" to "anon";

grant delete on table "public"."prices" to "authenticated";

grant insert on table "public"."prices" to "authenticated";

grant references on table "public"."prices" to "authenticated";

grant select on table "public"."prices" to "authenticated";

grant trigger on table "public"."prices" to "authenticated";

grant truncate on table "public"."prices" to "authenticated";

grant update on table "public"."prices" to "authenticated";

grant delete on table "public"."prices" to "service_role";

grant insert on table "public"."prices" to "service_role";

grant references on table "public"."prices" to "service_role";

grant select on table "public"."prices" to "service_role";

grant trigger on table "public"."prices" to "service_role";

grant truncate on table "public"."prices" to "service_role";

grant update on table "public"."prices" to "service_role";

grant delete on table "public"."products" to "anon";

grant insert on table "public"."products" to "anon";

grant references on table "public"."products" to "anon";

grant select on table "public"."products" to "anon";

grant trigger on table "public"."products" to "anon";

grant truncate on table "public"."products" to "anon";

grant update on table "public"."products" to "anon";

grant delete on table "public"."products" to "authenticated";

grant insert on table "public"."products" to "authenticated";

grant references on table "public"."products" to "authenticated";

grant select on table "public"."products" to "authenticated";

grant trigger on table "public"."products" to "authenticated";

grant truncate on table "public"."products" to "authenticated";

grant update on table "public"."products" to "authenticated";

grant delete on table "public"."products" to "service_role";

grant insert on table "public"."products" to "service_role";

grant references on table "public"."products" to "service_role";

grant select on table "public"."products" to "service_role";

grant trigger on table "public"."products" to "service_role";

grant truncate on table "public"."products" to "service_role";

grant update on table "public"."products" to "service_role";

grant delete on table "public"."seo_crawls" to "anon";

grant insert on table "public"."seo_crawls" to "anon";

grant references on table "public"."seo_crawls" to "anon";

grant select on table "public"."seo_crawls" to "anon";

grant trigger on table "public"."seo_crawls" to "anon";

grant truncate on table "public"."seo_crawls" to "anon";

grant update on table "public"."seo_crawls" to "anon";

grant delete on table "public"."seo_crawls" to "authenticated";

grant insert on table "public"."seo_crawls" to "authenticated";

grant references on table "public"."seo_crawls" to "authenticated";

grant select on table "public"."seo_crawls" to "authenticated";

grant trigger on table "public"."seo_crawls" to "authenticated";

grant truncate on table "public"."seo_crawls" to "authenticated";

grant update on table "public"."seo_crawls" to "authenticated";

grant delete on table "public"."seo_crawls" to "service_role";

grant insert on table "public"."seo_crawls" to "service_role";

grant references on table "public"."seo_crawls" to "service_role";

grant select on table "public"."seo_crawls" to "service_role";

grant trigger on table "public"."seo_crawls" to "service_role";

grant truncate on table "public"."seo_crawls" to "service_role";

grant update on table "public"."seo_crawls" to "service_role";

grant delete on table "public"."subscriptions" to "anon";

grant insert on table "public"."subscriptions" to "anon";

grant references on table "public"."subscriptions" to "anon";

grant select on table "public"."subscriptions" to "anon";

grant trigger on table "public"."subscriptions" to "anon";

grant truncate on table "public"."subscriptions" to "anon";

grant update on table "public"."subscriptions" to "anon";

grant delete on table "public"."subscriptions" to "authenticated";

grant insert on table "public"."subscriptions" to "authenticated";

grant references on table "public"."subscriptions" to "authenticated";

grant select on table "public"."subscriptions" to "authenticated";

grant trigger on table "public"."subscriptions" to "authenticated";

grant truncate on table "public"."subscriptions" to "authenticated";

grant update on table "public"."subscriptions" to "authenticated";

grant delete on table "public"."subscriptions" to "service_role";

grant insert on table "public"."subscriptions" to "service_role";

grant references on table "public"."subscriptions" to "service_role";

grant select on table "public"."subscriptions" to "service_role";

grant trigger on table "public"."subscriptions" to "service_role";

grant truncate on table "public"."subscriptions" to "service_role";

grant update on table "public"."subscriptions" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."business_information"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Read for users based on user_id"
on "public"."business_information"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."competitors"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."competitors"
as permissive
for select
to authenticated, service_role
using (true);


create policy "Enable insert for authenticated users only"
on "public"."customers"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = id));


create policy "Enable read access for all users"
on "public"."customers"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."prices"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."products"
as permissive
for select
to public
using (true);


create policy "Enable read access for service role"
on "public"."products"
as permissive
for select
to service_role
using (true);


create policy "Insert for SEO Crawls"
on "public"."seo_crawls"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Read Access for SEO Crawls"
on "public"."seo_crawls"
as permissive
for select
to service_role
using (true);


create policy "SEO Crawls read for website"
on "public"."seo_crawls"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."subscriptions"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Enable insert for authenticated users only"
on "public"."users"
as permissive
for insert
to authenticated
with check ((auth.uid() = id));


create policy "Enable read access for all users"
on "public"."users"
as permissive
for select
to public
using ((auth.uid() = id));


CREATE TRIGGER "Create Stripe Customer" AFTER INSERT ON public.customers FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('https://aryklmppwuliidmvzwpo.supabase.co/functions/v1/create-stripe-customer', 'POST', '{"Content-type":"application/json","Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFyeWtsbXBwd3VsaWlkbXZ6d3BvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcyNTIyNTMzNSwiZXhwIjoyMDQwODAxMzM1fQ.vJuoCasJnJDE8A1AP0Vt6x68bCKIjXpoWYNTymlM6S0"}', '{}', '1000');


